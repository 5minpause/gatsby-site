{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/quick-wins-and-simple-steps-for-improving-the-quality-of-your-code","result":{"data":{"post":{"__typename":"MdxPost","slug":"/quick-wins-and-simple-steps-for-improving-the-quality-of-your-code","title":"Quick wins and simple steps for improving the quality of your code","date":"04.03.2019","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Quick wins and simple steps for improving the quality of your code\",\n  \"categories\": \"article, quality\",\n  \"date\": \"2019-03-04 17:45:00 +0200\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Good software needs good code. If you want to achieve a high quality in what you ship, you need to care for the quality down to each method you write.\"), mdx(\"p\", null, \"I want to use this week to write a small series on techniques and ideas about how to increase your code quality.\\nWhen I look at code, it is often possible to find spots in the code, where a simple change can be made. In some cases it's even an easy tweak.\\nSome of these examples will come from the the actual code that I worked on. Others will be created by me, for this series. You won't see any code from my clients, of course. The only thing I take from them is the inspiration. And money. \\uD83E\\uDD23\"), mdx(\"h2\", null, \"Naming\"), mdx(\"p\", null, \"A good place to start with is to look at variable names. If you have a call to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".map()\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".each()\"), \", then take a look at what you are iterating. Is is a list of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Book\"), \" objects? Then you should call each item that you are iterating what it is, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"book\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"# this is not good\\nitems.map do |i|\\n  i.doSomething\\nend\\n\\n# this is better\\nlist_of_books.map do |book|\\n  book.doSomething\\nend\\n\")), mdx(\"p\", null, \"This would take care of the naming of some variables.\"), mdx(\"p\", null, \"In classic JavaScript loops, you often see a variable called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"for (i = 0; i < array.length; i++) {\\n  // something happens here\\n}\\n\")), mdx(\"p\", null, \"Well, what's this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" anyway? If it's an iterator, why not call it that? Even worse, when you sometimes combine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"i\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"j\"), \"and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"k\"), \":\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for (i = 1, j = 0, k = 150; i <= 5; i++, j += 30, k -= 30) { /* do work */ }\"), \"\\n(This is copied from a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/8348823\",\n    \"title\": \"SO answer\"\n  }), \"SO answer\"), \")\"), mdx(\"p\", null, \"I bet you a non-trivial amount of money that you won't be able to tell me \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"without looking it up\"), \" what these variables refer to 9 months after you wrote code like that.\"), mdx(\"p\", null, \"Will it take a small amount of extra time to come up with a proper name and use that instead? Probably. Will this extra time be saved \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"every time a(nother) human reads that code\"), \"? Hell yes!\"), mdx(\"p\", null, \"A possible next step would be to change something about the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"doSomething()\"), \" method. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"What the hell does it do?\"), \" Why doesn't it tell us already from its name?\\nIn this case? Because that's just pseudo-code for you \\uD83D\\uDE1C\\nBut please make sure that you use proper and valid names for your methods and variables.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Good software needs good code. If you want to achieve a high quality in what you ship, you need to care for the quality down to each methodâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/quick-wins-and-simple-steps-for-improving-the-quality-of-your-code","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}