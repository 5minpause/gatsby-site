{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/technical-debt","result":{"data":{"page":{"__typename":"MdxPage","title":"Technical Debt","slug":"/technical-debt","excerpt":"If you are doing software development you have little chance to escape the term\n‘technical debt’. You can find many articles online…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Technical Debt\",\n  \"slug\": \"/technical-debt\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If you are doing software development you have little chance to escape the term\\n\\u2018technical debt\\u2019. You can find many articles online discussing technical debt\\nand its implications on software development. But there is a problem with many\\nof those articles.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"They are discussing the wrong thing.\")), mdx(\"p\", null, \"This article is my attempt at describing what technical debt really is, how to\\nspot it and what to do about it. So let's start with the current, wide-spread\\ndefinition of technical debt.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Technical debt is like financial debt. You take out a loan and until you pay it\\nback in full, you have to pay interest. The loan in the case of software are the\\nshortcuts you take to reach your goal sooner. If you decide to forgo writing\\ntests or having a proper architecture and design for your software or feature,\\nyou are creating technical debt. You might reach your goal sooner this way, but\\nonce you have to touch the code again, you have to pay the interest. In this\\ncase the interest is the time the next feature takes longer because you have to\\nclean up the old code first. Or because the old code is written in such a way\\nthat implementing new features just takes longer. The code might be hard to\\nunderstand or work with. Many duplications and bad abstractions generally fall\\ninto this category.\")), mdx(\"p\", null, \"This definition makes sense, right? Perhaps you've experienced this situation\\nfirsthand already. Situations like these do happen. Bad code is written, which\\nleads to bugs and slows down later stages of development.\"), mdx(\"p\", null, \"Only, this isn't technical debt. I'll tell you how to call that. But first,\\nhere's the original definition of Technical Debt, by Ward Cunningham:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Technical debt defines a cycle where our understanding grows so that one day\\nin the future we see a better way and put it in.\")), mdx(\"p\", null, \"Now this may be hard to understand completely, so let's take an expanded\\nexplanation from Ward:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" \\u201CI\\u2019m never in favor of writing code poorly, but I am in favor of writing code\\nto reflect your current understanding of a problem even if that understanding is\\npartial.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CYou know, if you want to be able to go into debt that way by developing\\nsoftware that you don\\u2019t completely understand, you are wise to make that\\nsoftware reflect your understanding as best as you can, so that when it does\\ncome time to refactor, it\\u2019s clear what you were thinking when you wrote it,\\nmaking it easier to refactor it into what your current thinking is now.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CIn other words, the whole debt metaphor, let\\u2019s say, the ability to pay back\\ndebt, and make the debt metaphor work for your advantage depends upon your\\nwriting code that is clean enough to be able to refactor as you come to\\nunderstand your problem.\\u201D\")), mdx(\"p\", null, \"Perhaps now it is clearer what the current definition of technical debt actually\\ndescribes and how to call code that is written like that: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Sloppy work\"), \". Don't\\nuse the term Technical Debt for describing code that takes shortcuts. It's just\\nbad work, especially when developers know better but decide to take those\\nshortcuts anyway. Once you see code like that, let the developers know\\u2014in a\\ngentle kind of way!\\u2014that they've messed up.\"), mdx(\"h2\", null, \"Don't use the term Technical Debt. It's just sloppy work.\"), mdx(\"p\", null, \"Here's an example of what sloppy work can look like to make it easier to spot\\nin the future:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u201CIn order to meet the new release deadline of November, we have decided to\\nforego writing unit tests in the final three weeks of the project. We will write\\nthese tests after the release.\\u201D\")), mdx(\"p\", null, \"That example shows that there was technical debt already present. If it is hard\\nto write tests and if writing tests slows you down so much that you miss release\\ntargets, you either have too many inexperienced developers or writing tests is\\ntoo hard and laborious because of bad code design.\"), mdx(\"h2\", null, \"How to spot or notice sloppy work\"), mdx(\"p\", null, \"By now you know the difference between technical debt and sloppy work. If you\\nwant to get help in recognizing sloppy work, there are tools for that. One of\\nthe best ways to scan your code for those spots is to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"static analysis\"), \".\\nYou can use a \\u201Csoftware-as-a-service\\u201D offering like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codeclimate.com\"\n  }), \"Code\\nClimate\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codescene.io\"\n  }), \"CodeScene\"), \". These\\ntools get access to your Git repository and make a complete, in-depth scan of\\nyour code. You are then presented with a detailed analysis of your code and all\\nits good and bad parts. If you don't like using an external tool for a static\\ncode analysis you can also find help with running it locally, on your\\ncomputer. Depending on your tech stack (programming languages etc.) there are\\nsmall tools or even whole suites available. If that's something you'd like to\\nuse, I'll have a different article on those available soon. I'll update this\\narticle and link appropriately once I've published it.\"), mdx(\"p\", null, \"Other examples of sloppy work are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Missing documentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Development of features/bugfixes/etc. that take longer than estimated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.osnews.com/story/19266/wtfsm/\"\n  }), \"The amounts of \\u201CWTF\\u201Ds uttered by developers during code\\nreview\"))), mdx(\"h2\", null, \"What do to about sloppy work and real technical debt?\"), mdx(\"p\", null, \"In order to tackle the sloppy work in your project you can use static code\\nanalysis, as I've already written. Another idea is to create a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sloppiness\\nledger\"), \". It's a document that you can create in your team's wiki or add it as a\\ntext file to your project directory. In there you record decisions. Every time\\nyou feel like you have to take a shortcut while writing your code you add that\\ndata point to your ledger. Be impartial about who is responsible or who decided\\nto take the shortcut. Just add the decision to the ledger. Write down \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"when\"), \"\\nthis decision was made and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"note the reasons\"), \". But don't judge, just collect\\nthem.\\nReview your ledger in regular intervals. After some time has passed you can use\\nthe ledger in discussions with your managers to decide how to tackle sloppy code\\nand why development might take longer than they'd like. Depending on how you\\nmanage your sloppiness ledger you can link those entries back to work your team\\ndid then and show how that decision impacted you then and now. Framing\\ndiscussions like that makes a decision to not write tests more tangible for all\\npeople involved.\"), mdx(\"p\", null, \"My suggestion is to also create a debt ledger. You hopefully have a way to\\nrecord your software architectural decisions (you use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/joelparkerhenderson/architecture_decision_record\"\n  }), \"ADRs\"), \",\\nright?!). Using ADRs you can record who made what decision when. Once you've\\nlearned more about your problem domain you might revisit older ADRs and realize\\nthat you are  -- as a team -- now able to find a better solution for this\\nproblem. This is the time where you add an entry to your debt ledger. You record\\nin it what the original decision was and how more knowledge changed the\\nsolution. You can also add descriptions of how refactoring code lead to a better\\nsolution. Then you can compare and see whether your team has a problem with too\\nlittle knowledge of the problem/solution domain or with doing sloppy work.\\nPerhaps they need some \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/services/\"\n  }), \"workshops\"), \" to increase their ability to\\nwrite better code?\"), mdx(\"h2\", null, \"Ideas about technical debt, heard on the web, refuted\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In short, technical debt is created when new business requirements make old\\ncode obsolete.\")), mdx(\"p\", null, \"That's BS. This is just regular practise.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Replace the application. While this will introduce new technical debt, the\\nidea is to address it quickly and minimize it as much possible.\")), mdx(\"p\", null, \"Without more/better knowledge, practices and processes you'll be in the same\\nsituation with your code as you're now. Only later.\\nYou will get the same results if you do the same things.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Remember, just like financial debt, technical debt gets more expensive the\\nlonger you hold it.\")), mdx(\"p\", null, \"This isn't necessarily true. If you have old code that works, never changes and\\nthat you don't have to touch it doesn't matter what quality it has. But that's\\nanother article to write \\uD83D\\uDE09...\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"When taking short cuts and delivering code that is not quite right for the programming task of the moment, a development team incurs Technical Debt. This debt decreases productivity. This loss of productivity is the interest of the Technical Debt.\")), mdx(\"p\", null, \"I am not quite certain of that. The debt is not yet knowing enough about the problem domain and writing/implementing the solution domain. The interest is when you learn something new and have to go back to refactor the old solution domain to reflect your knowledge gain. There might be a temporary loss of productivity since you cannot expand the application with new features while you are refactoring.\"), mdx(\"p\", null, \"In closing, let me share another quote from Ward Cunningham:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"With borrowed money you can do something sooner than you might otherwise, but until you pay back that money you will pay interest.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I thought borrowing money was a good idea. I thought that rushing software out the door to get some experience with it was a good idea. But that of course you would eventually go back and as you learned things about that software you would repay that loan by refactoring the program to reflect your experience as you acquired it.\")), mdx(\"p\", null, \"Here's where you can find more from Ward on Technical Debt: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://c2.com/cgi/wiki?WardExplainsDebtMetaphor\"\n  }), \"http://c2.com/cgi/wiki?WardExplainsDebtMetaphor\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/technical-debt"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}