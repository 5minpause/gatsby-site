{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/code-coverage-can-be-misleading","result":{"data":{"post":{"slug":"/code-coverage-can-be-misleading","title":"Code coverage can be misleading","date":"11.03.2019","tags":null,"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Code coverage can be misleading\",\n  \"categories\": \"article, testing\",\n  \"date\": \"2019-03-11T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"During the last week, I had two discussions about code coverage. Code coverage is the metric of how many lines of code are covered by your automated test suite. Many test frameworks have built-in ways to measure this. Other times you have to install another tool manually. When you run your tests you then see how many lines are not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"covered\"), \" by a test. That means that no test was run where this line of code was \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"evaluated\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"executed\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"interpreted\"), \".\"), mdx(\"p\", null, \"When you reach 100% code coverage, what then? Are you done? Could you guarantee that there are absolutely no bugs in your code?\"), mdx(\"p\", null, \"If you are tempted to say \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Yes\"), \", or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"maybe?\\\"\"), \" then let me tell you that you are wrong.\"), mdx(\"p\", null, \"Consider this piece of code.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://holgerfrohloff.de/wp-content/uploads/2019/03/carbon.png\",\n    \"alt\": null,\n    \"title\": \"code coverage error\"\n  })), mdx(\"p\", null, \"If you write a unit test for this method, the line \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"eval...\"), \" will be interpreted because of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if emergency\"), \" at the end. The line is thus covered.\\nBut the code is not covered or tested.\"), mdx(\"p\", null, \"Admittedly, this is a very trivial example that I made up. In reality, there are some more profound things to consider.\"), mdx(\"p\", null, \"If you have complex conditionals you might need a logic table where you compare all possible combinations of the atomic parts of the conditional.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://holgerfrohloff.de/wp-content/uploads/2019/03/conditionals.png\",\n    \"alt\": null,\n    \"title\": \"Conditionals\"\n  })), mdx(\"p\", null, \"You cannot possibly evaluate this in your head and know whether you checked for every possible, sensible combination. Yet when you cover that line you are at 100% coverage and can go home, right?\"), mdx(\"p\", null, \"So what do you do? Let's look at this tomorrow.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"During the last week, I had two discussions about code coverage. Code coverage is the metric of how many lines of code are covered by yourâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/code-coverage-can-be-misleading","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}