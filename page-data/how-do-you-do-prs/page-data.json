{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx","path":"/how-do-you-do-prs","result":{"data":{"page":{"__typename":"MdxPage","title":"How do you do PRs?","slug":"/how-do-you-do-prs","excerpt":"Before opening a PR I advocate for using before-commit hooks in Git. These hooks enable you to run custom scripts before commiting changesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How do you do PRs?\",\n  \"slug\": \"/how-do-you-do-prs\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Before opening a PR\"), mdx(\"p\", null, \"I advocate for using before-commit hooks in Git. These hooks enable you to run custom scripts before commiting changes. There a quite a number of quality checks, if you ask me (and you kind-of do, since you are reading this! \\uD83D\\uDE09), and almost all of them should be run before comitting your changes. I'll mention the checks later on, as well.\"), mdx(\"h3\", null, \"Baseline measurements of a PR\"), mdx(\"p\", null, \"One of the most important things to remember when doing PRs:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Don't let them get too big.\"), \" A size I found to work well was around 400 lines changed. While this is no hard limit, going over it tends to incorporate too many changes at once. This makes the review harder for the reviewers.\"), mdx(\"p\", null, \"Another thing not to lose track of, is the number of days a PR is open. You should review PRs as soon, as they are assigned to you, or when you are being mentioned in their description (or in comments). It is your duty not to let your team wait for too long on your feedback/review. If there are no major errors in the changes, a 400 lines feature should be reviewed and merged within 1\\u20132 business days.\"), mdx(\"h3\", null, \"Who do you assign a PR to? Who should review?\"), mdx(\"p\", null, \"This depends very much on your team structure and how you are organized. If it is possible, it would be great to get two people to review your changes. A healthy mix could be one person from your immediate team, and another one from a different team. This can have the benefit of a different perspective. The one from the outside-team probably doesn't know too much about your feature and the specifics of your code. This forces you to be extra detailled when writing your description and documentation and they might not make some assumptions that you and your team take for granted. This situation needs to be handled carefully, you don't want to get derailed by fundamental questions. But it could also prove to be beneficial to your feature, ymmv. It also increases knowledge across team boundaries, which I consider to be good practice.\"), mdx(\"p\", null, \"If cross-team doesn't work for you, try to get a more experienced (or same level as you) and a less experienced person from your team. While both reviewers will help you improve your result, the less experienced might get a chance to learn from reviewing your code.\"), mdx(\"p\", null, \"In any case, @mention your reviewers in the description and (if possible in your software) assign the PR to the one you want to be responsible for merging.\"), mdx(\"h3\", null, \"What should you write in the description of a PR?\"), mdx(\"p\", null, \"The first thing that you should write is a good title. This is the first thing that reviewers see, and it usually also goes into the emails they get about the PR. So make sure they understand what it is about. This is also a good place to let the reviewers know if you only want a review, without the goal of merging the PR. Perhaps you have an early draft of your feature, and want guidance on the general direction. You can do that by prefixing your title with something like\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"WIP: Integrate Stripe as payment provider\")), mdx(\"p\", null, \"This WIP (work in progress) makes your intentions clear. If you are using GitHub, common practice is to use labels for that. So you could have a \\\"Do not merge\\\" label, or again a \\\"WIP\\\" label. I tend to always write it into the title as well, so people can't miss it.\"), mdx(\"p\", null, \"The next point to take care of is the description. This is where you should spent most of your time, when creating a PR. Consider writing about the following points:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What is changed?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why was the change necessary?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How does the project / part of the code / microservice look after making your changes?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Are there any side-effects of your change?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do you want to add any commentary about your changes? Perhaps link to Stack Overflow answers that helped you, or blog articles and books you referenced during development?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Is there anything unclear with your changes? Perhaps you have a road-block that you need help with? Or you are uncertain how your changes interfere with another component? Ask about that. This is the place to do that.\")), mdx(\"p\", null, \"If it makes sense, you should add screenshots of the before/after situation. If your changes contain animations or important visual effects, provide a gif or a short screencast of your changes.\"), mdx(\"p\", null, \"Finally, make clear what you want the reviewers to look for, test or what they should comment on. If they follow this guide, they will look for more than that, but it is always appreciated to get a little guidance from the author of a PR.\"), mdx(\"p\", null, \"Don't forget to link/reference the issue/ticket in your management software that this feature/PR belongs to.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/how-do-you-do-prs"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}